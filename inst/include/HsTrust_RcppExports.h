// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_HsTrust_RCPPEXPORTS_H_GEN_
#define RCPP_HsTrust_RCPPEXPORTS_H_GEN_

#include "HsTrust_types.hpp"
#include <Rcpp.h>

namespace HsTrust {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("HsTrust", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("HsTrust", "HsTrust_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in HsTrust");
            }
        }
    }

    inline SEXP init_tronC(SEXP Rfun, SEXP Rgrad, SEXP Rhv, int nr) {
        typedef SEXP(*Ptr_init_tronC)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_init_tronC p_init_tronC = NULL;
        if (p_init_tronC == NULL) {
            validateSignature("SEXP(*init_tronC)(SEXP,SEXP,SEXP,int)");
            p_init_tronC = (Ptr_init_tronC)R_GetCCallable("HsTrust", "HsTrust_init_tronC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_init_tronC(Rcpp::wrap(Rfun), Rcpp::wrap(Rgrad), Rcpp::wrap(Rhv), Rcpp::wrap(nr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline void tronC(SEXP RCfun, SEXP w, double tol, bool verbose) {
        typedef SEXP(*Ptr_tronC)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_tronC p_tronC = NULL;
        if (p_tronC == NULL) {
            validateSignature("void(*tronC)(SEXP,SEXP,double,bool)");
            p_tronC = (Ptr_tronC)R_GetCCallable("HsTrust", "HsTrust_tronC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tronC(Rcpp::wrap(RCfun), Rcpp::wrap(w), Rcpp::wrap(tol), Rcpp::wrap(verbose));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

}

#endif // RCPP_HsTrust_RCPPEXPORTS_H_GEN_
